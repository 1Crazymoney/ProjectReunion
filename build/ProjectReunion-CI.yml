# see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases for info on yaml ADO jobs
name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
variables:
  minimumExpectedTestsExecutedCount: 500  # Sanity check for minimum expected tests to be reported
  rerunPassesRequiredToAvoidFailure: 5
jobs:
# - job: Build
#   pool:
#     vmImage: 'windows-2019'
#   timeoutInMinutes: 120
#   strategy:
#     maxParallel: 10
#     matrix:
#       Debug_x86:
#         buildPlatform: 'x86'
#         buildConfiguration: 'Debug'
#       Release_x86:
#         buildPlatform: 'x86'
#         buildConfiguration: 'Release'
#         PGOBuildMode: 'Optimize'
#       Release_x64:
#         buildPlatform: 'x64'
#         buildConfiguration: 'Release'
#         PGOBuildMode: 'Optimize'
#       Release_Arm:
#         buildPlatform: 'arm'
#         buildConfiguration: 'Release'
#       Release_Arm64:
#         buildPlatform: 'arm64'
#         buildConfiguration: 'Release'

#   variables:
#     appxPackageDir : $(build.artifactStagingDirectory)\$(buildConfiguration)\$(buildPlatform)\AppxPackages
#     buildOutputDir : $(Build.SourcesDirectory)\BuildOutput
#     publishDir : $(Build.ArtifactStagingDirectory)
#   steps:
#   - template: AzurePipelinesTemplates\ProjectReunion-BuildDevProject-Steps.yml
#   - template: AzurePipelinesTemplates\ProjectReunion-PublishProjectOutput-Steps.yml

#UNDONE - subsequent PR
#- template: AzurePipelinesTemplates\ProjectReunion-RunHelixTests-Job.yml
#  parameters:
#    name: 'RunTestsInHelix'
#    dependsOn: Build
#    condition: in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
#    testSuite: 'DevTestSuite'
#    rerunPassesRequiredToAvoidFailure: $(rerunPassesRequiredToAvoidFailure)

# # Create Nuget Package
# - template: AzurePipelinesTemplates\ProjectReunion-CreateNugetPackage-Job.yml
#   parameters:
#     jobName: CreateNugetPackage
#     dependsOn: Build
#     prereleaseVersionTag: ci

# Build solution that depends on nuget package
#- template: AzurePipelinesTemplates\ProjectReunion-NugetReleaseTest-Job.yml
#  parameters:
#    buildJobName: 'BuildNugetPkgTests'
#    buildArtifactName: 'NugetPkgTestsDrop'
#    runTestJobName: 'RunNugetPkgTestsInHelix'
#    helixType: 'test/nuget'
#    dependsOn: CreateNugetPackage
#    pkgArtifactPath: '$(artifactDownloadPath)\drop'

#UNDONE - depends on Helix infrastructure, subsequent PR
# Framework package tests
#- template: AzurePipelinesTemplates\ProjectReunion-NugetReleaseTest-Job.yml
#  parameters:
#    buildJobName: 'BuildFrameworkPkgTests'
#    buildArtifactName: 'FrameworkPkgTestsDrop'
#    runTestJobName: 'RunFrameworkPkgTestsInHelix'
#    helixType: 'test/frpkg'
#    dependsOn: CreateNugetPackage
#    pkgArtifactPath: '$(artifactDownloadPath)\drop\FrameworkPackage'

#UNDONE - subsequent PR
#- template: AzurePipelinesTemplates\ProjectReunion-ProcessTestResults-Job.yml
#  parameters:
#    dependsOn:
#    - RunTestsInHelix
#    - RunNugetPkgTestsInHelix
#    - RunFrameworkPkgTestsInHelix
#    rerunPassesRequiredToAvoidFailure: $(rerunPassesRequiredToAvoidFailure)
#    minimumExpectedTestsExecutedCount: $(minimumExpectedTestsExecutedCount)

# MRTCore build pipeline
- template: ..\dev\MRTCore\azure-pipelines.yml

- job: CreateNuget
  pool:
    vmImage: 'windows-latest'
  timeoutInMinutes: 10
  dependsOn: PublishMRT
  condition: Always() # TODO Don't use always in the future
  variables:
    solution: '**/*.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
    Major: '1'
    Minor: '0'
    Patch: '0'
    MRTSourcesDirectory: $(Build.SourcesDirectory)\dev\MRTCore
    codeSign: ${{ eq(variables['System.definitionId'], '1356') }}
    MRTBinariesDirectory: $(Build.SourcesDirectory)\BuildOutput

  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 5.6'
    inputs:
      versionSpec: 5.6
    continueOnError: true
  - task: DownloadBuildArtifacts@0
    displayName: 'Download: Nuget contents'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'drop'
      downloadPath: '$(Build.ArtifactStagingDirectory)'
  - script: |
      echo Dumping Drop Directory Contents
      dir /s $(Build.ArtifactStagingDirectory)\drop
  - script: |
      echo Dumping Source Directory Contents
      dir /s $(Build.SourcesDirectory)\dev\MRTCore
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    inputs:
      command: 'pack'
      packagesToPack: '$(Build.SourcesDirectory)\dev\MRTCore\mrt\NuGet\Microsoft.ApplicationModel.Resources.nuspec'
      versioningScheme: 'byPrereleaseNumber'
      majorVersion: '$(Major)'
      minorVersion: '$(Minor)'
      patchVersion: '$(Patch)'
      basePath: '$(Build.ArtifactStagingDirectory)\drop'
      packDestination: '$(Build.ArtifactStagingDirectory)\nuget'
  - script: |
      echo Dumping Entire Artifact Directory Contents
      dir /s $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\nuget'
      ArtifactName: 'nuget'